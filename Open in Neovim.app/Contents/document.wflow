<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>526</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>-- Latest: https://github.com/zeitlings/alfred-ghostty-script-- v1.0.0 - 02.01.2025-- tab : t | window: n | split: dproperty open_new : "t"property reuse_tab : falseproperty timeout_seconds : 3property shell_load_delay : 1.0 -- Delay for session to loadproperty switch_delay : 0.35 -- Delay when switching windowson isRunning()	application "Ghostty" is runningend isRunningon summon()	tell application "Ghostty" to activateend summonon hasWindows()	if not isRunning() then return false	tell application "System Events"		return exists window 1 of process "Ghostty"	end tellend hasWindowson waitForWindow(timeout_s)	set end_time to (current date) + timeout_s	repeat until hasWindows() or ((current date) &gt; end_time)		delay 0.05	end repeat	return hasWindows()end waitForWindowon handleWindow(just_activated)	if just_activated then		return	end if	set has_windows to hasWindows()	set needs_window to not has_windows	set override_reuse to (reuse_tab and not has_windows)	tell application "System Events"		if needs_window or override_reuse then			keystroke "n" using command down -- New window			return		end if		if not reuse_tab then			if open_new is "d" and has_windows then				keystroke "d" using command down -- New split right			else				keystroke open_new using command down -- New window or tab			end if		end if	end tellend handleWindowon send(a_command, just_activated)
	if not just_activated then
		delay switch_delay
	end if
	
	set had_windows to hasWindows()
	handleWindow(just_activated)

	delay shell_load_delay
	
	if not waitForWindow(1) then
		display dialog "Failed to verify window exists"
		return
	end if

	set the clipboard to a_command -- Use clipboard to preserve spaces
	tell application "System Events"
		keystroke "v" using command down -- Paste instead of typing
		keystroke return
	end tell
end send
on run {input, parameters}	# seem to need the full path at least in some cases	# -p opens files in separate tabs	set nvimCommand to "/opt/homebrew/bin/nvim -p "		set filepaths to ""	if input is not {} then		repeat with currentFile in input			set filepaths to filepaths &amp; quoted form of POSIX path of currentFile &amp; " "		end repeat	end if		set just_activated to not isRunning()	summon()	if just_activated then		if not waitForWindow(timeout_seconds) then			display dialog "Failed to create initial window"			return		end if	end if	send(input, just_activated)end run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>1968FC1A-D1FD-4C14-B846-96D2359070D8</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>C051AF3A-7134-4D88-B8E0-EB991B521E5D</string>
				<key>UUID</key>
				<string>1E8012AA-C50B-444B-A35C-970404BF0706</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>470.000000:678.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
